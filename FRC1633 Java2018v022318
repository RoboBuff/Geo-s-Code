package org.usfirst.frc.team1633.robot;

import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;

import com.ctre.CANTalon;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

public class GeosCode extends IterativeRobot{
	
		/*	Ok so we know that the PWM ports 0,1,2,3 are going to be used by the spark motor controllers 
		 *  that leaves 4,5,6,7,8,9 to be used. The shaft encoders that are  attached to the gear boxes have  
		 *  the ports 4-8 since we are using one for input and one for output. That now leaves with the 8 and 9 
		 *  which are going to be used by the two Talon motors that are attached.
		 *  
		 *  The next change is the final int variables. This change is to help make the code more fluid and less
		 *  chaotic. "f" stands for front and "r" stands for rear. 
		 *  
		 */
	
	    private static final int fLeftPort = 0;					
	    private static final int rLeftPort = 1;					 
		private static final int fRightPort = 2;				
		private static final int rRightPort = 3;				        
		 
		private static final int kLiftEndEffector = 8;
		private static final int kLiftEndEffector2 = 9;
		
		private static final int leftSolenoidExtend = 4; 
		private static final int leftSolenoidContract = 5;
		
		private static final int rightSolenoidExtend = 6;
		private static final int rightSolenoidContract = 7;
		
		DoubleSolenoid leftSolenoid;
		DoubleSolenoid rightSolenoid;
		
		Spark frontLeftSim;
		Spark rearLeftSim;
		SpeedControllerGroup leftGearBox = new SpeedControllerGroup(frontLeftSim, rearLeftSim);
		
		Spark frontRightSim;
		Spark rearRightSim;
		SpeedControllerGroup rightGearBox = new SpeedControllerGroup(frontRightSim, rearRightSim);
	
		Talon LiftMotor;
		Talon LiftMotor2;
		
		/* Ok here is the thing when using the CANTalon motors is that the robo rio needs to be able to see 
		 * these ports and without getting the rio configured to do this there is no way in knowing what 
		 * port numbers to use for them. This would apply to the pneumatics, we have to set the ports in
		 * order for them to actually work. Those numbers remain arbitrary as well as the pneumatics ones.
		 */
		
		CANTalon leftTopClawMotor = new CANTalon(11);
		CANTalon leftBottomClawMotor = new CANTalon(12);
		CANTalon rightTopClawMotor = new CANTalon(13);
		CANTalon rightBottomClawMotor = new CANTalon(14);
		
		final int JoystickChannel = 0;
		
		Joystick stick = new Joystick(JoystickChannel);

		JoystickButton ONEButton = new JoystickButton(stick, 3);
		
		Timer time = new Timer();
		
		/*	Ok for this part below we have the new implementation of what was the DriveRobot class.
		 *  From what I understand these should essentially work the same way.
		 *  
		 *  We may have to implement a new drive class for the CANTalons...
		 */

		DifferentialDrive robotDrive = new DifferentialDrive(rightGearBox, leftGearBox);
		
		
		@Override
		public void robotInit() {
			
			leftSolenoid = new DoubleSolenoid(leftSolenoidExtend, leftSolenoidContract);
			rightSolenoid = new DoubleSolenoid(rightSolenoidExtend, rightSolenoidContract);
			
			frontLeftSim = new Spark(fLeftPort);
			rearLeftSim = new Spark(rLeftPort);
			
			frontRightSim = new Spark(fRightPort);
			rearRightSim = new Spark(rRightPort);
			
			LiftMotor = new Talon(kLiftEndEffector);
			LiftMotor = new Talon(kLiftEndEffector2);
			
			robotDrive = new DifferentialDrive(rightGearBox, leftGearBox);
			
			/*	Another way that this can be determined because I am calling the speed controller group to 
			 *  this robotDrive class instead of what is written up above we can place:
			 *  
			 *  robotDrive = new DifferentialDrive(frontLeftSim, rearLeftSim, frontRigthSim, rearRightSim);
			 * 
			 *  That will imply that the two speed groups that were declared would have to be either commented
			 *  out or just plain out deleted.
			 */
			
			frontRightSim.setInverted(true);
			
			/* 
			 * This example may not be the perfect one but is something that is easily understandable.
			 * Here is the link to how to get it to the RoboRio:
			 * 
			 * https://wpilib.screenstepslive.com/s/currentCS/m/vision/l/288981-using-the-microsoft-lifecam-hd-3000
			 * 
			 */
			
			new Thread(() -> {
				
                UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
                camera.setResolution(640, 480);
                
                CvSink cvSink = CameraServer.getInstance().getVideo();
                CvSource outputStream = CameraServer.getInstance().putVideo("Blur", 640, 480);
                
                Mat source = new Mat();
                Mat output = new Mat();
                
                while(!Thread.interrupted()) {
                    cvSink.grabFrame(source);
                    Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY);
                    outputStream.putFrame(output);
                }
            }).start();
    }
			
		
		@Override
		public void autonomousPeriodic() {

			time.start();
			
			robotDrive.tankDrive(1, 1);
			
			System.out.println(time.get());
			
		}
		
		@Override
		public void teleopPeriodic() {
			
			robotDrive.arcadeDrive(-stick.getRawAxis(1), stick.getRawAxis(2));
			
			//Only implement when testing
			//testRobotDrive.arcadeDrive(stick.getRawAxis(1), stick.getRawAxis(2));
			
			if (stick.getRawButtonPressed(2)) {
				
				if(rightSolenoid.get() == Value.kForward && leftSolenoid.get() == Value.kForward) {
					
					rightSolenoid.set(Value.kReverse);
					leftSolenoid.set(Value.kReverse);
				}else {
					
					rightSolenoid.set(Value.kForward);
					leftSolenoid.set(Value.kForward);
					
				}
				
			}

		}

	}


